function computeLPSArray(pat, M, lps) {
    let len = 0; // Инициализируем длину наибольшего суффикса-префикса как 0
    let i = 1; // Индекс в строке-образце, начинаем с индекса 1
    lps[0] = 0; // Значение для lps[0] всегда равно 0, так как у односимвольной строки нет суффикса, который также является префиксом
    
    // Итерируемся по строке-образцу
    while (i < M) {
        // Если символы pat[i] и pat[len] совпадают, увеличиваем len и сохраняем его значение в lps[i]
        if (pat[i] === pat[len]) {
            len++;
            lps[i] = len;
            i++;
        } else {
            // Если символы не совпадают и len не равен 0, уменьшаем len до значения, которое указывает на предыдущий совпавший префикс-суффикс
            if (len !== 0) {
                len = lps[len - 1];
            } else {
                // Если len равен 0, значит, текущий символ не образует ни одного суффикса, который также является префиксом
                // Устанавливаем lps[i] в 0 и увеличиваем i
                lps[i] = 0;
                i++;
            }
        }
    }
}


function KMPSearch(pat, txt) {
    // Вычисляем длины образца и текста
    const M = pat.length; // Длина образца
    const N = txt.length; // Длина текста

    // Создаем массив для хранения значений LPS (Longest Proper Prefix which is also Suffix)
    const lps = new Array(M);
    
    // Вычисляем таблицу LPS для образца
    computeLPSArray(pat, M, lps);

    // Инициализируем индексы для текста и образца
    let i = 0; // Индекс для текста
    let j = 0; // Индекс для образца
    let foundIndexes = []; // Массив для хранения индексов найденных фрагментов

    // Основной цикл алгоритма КМП
    while (i < N) {
        // Если символы совпадают, двигаемся к следующему символу в обеих строках
        if (pat[j] === txt[i]) {
            j++;
            i++;
        }

        // Если весь образец совпал с частью текста
        if (j === M) {
            // Записываем индекс начала найденного фрагмента в массив
            foundIndexes.push(i - j);
            // Сдвигаем индекс образца на значение из таблицы LPS
            j = lps[j - 1];
        } else if (i < N && pat[j] !== txt[i]) {
            // Если символы не совпадают и не дошли до конца текста
            if (j !== 0) {
                // Сдвигаем индекс образца на значение из таблицы LPS
                j = lps[j - 1];
            } else {
                // Иначе просто сдвигаем индекс текста на один символ вперед
                i = i + 1;
            }
        }
    }

    // Если были найдены фрагменты, возвращаем массив индексов, иначе возвращаем -1
    if (foundIndexes.length > 0) {
        return foundIndexes;
    } else {
        return -1; // Фрагмент не найден
    }
}

// Пример использования:
const txt = "ABABDABACDABABCABAB";
const pat = "ABABCABAB";
const foundIndexes = KMPSearch(pat, txt);

// Выводим результаты поиска в консоль
if (foundIndexes !== -1) {
    console.log("Фрагмент найден в позициях: " + foundIndexes.join(", "));
} else {
    console.log("Фрагмент не найден в тексте.");
}
